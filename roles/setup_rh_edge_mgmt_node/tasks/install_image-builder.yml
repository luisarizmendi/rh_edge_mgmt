---
# Install image-builder with infra.osbuild collection (https://github.com/redhat-cop/infra.osbuild)
- name: Include secrets file with offline_token
  include_vars:
    file: "../vars/secrets.yml"

- name: Subscribe the system
  become: true
  shell: |
    subscription-manager register --username={{ red_hat_user }} --password={{ red_hat_password }} --force
    subscription-manager attach
    subscription-manager config --rhsm.manage_repos=1

- name: Prepare Image Builder server in x86_64
  become: true
  ansible.builtin.import_role:
    name: infra.osbuild.setup_server
  when: ansible_architecture is not defined or ansible_architecture == "x86_64"

- name: Prepare Image Builder serverin aarch64
  become: true
  ansible.builtin.import_role:
    name: infra.osbuild.setup_server
  vars:
    _setup_server_base_packages:  
      - rsync
      - osbuild-composer
      - composer-cli
      - cockpit-composer
      - bash-completion
      - firewalld
      - genisoimage
      - httpd
      - cockpit
      - weldr-client
      - python3
      - lorax
      - pykickstart
  when: ansible_architecture == "aarch64"
  
- name: Install additional packages
  become: true
  ansible.builtin.dnf:
    state: latest
    name: "{{ packages }}"
  vars:
    packages:
    - coreutils
    - glibc-minimal-langpack
    - pykickstart
    - mtools
    - xorriso
    - genisoimage
    - isomd5sum
    - lorax
    - butane
    - rpmdevtools
    - rpmlint
    - yum-utils
    - createrepo
    - tree


- name: Initiate the rpm build tree
  become: true
  shell: rpmdev-setuptree


- name: Download RHEL ISO
  when: (rhel_iso_download_x86_64 or rhel_iso_download_aarch64) is defined and (rhel_iso_download_x86_64 or rhel_iso_download_aarch64) != False
  become: true
  block: 
    - name: Include secrets file with offline_token
      include_vars:
        file: "../vars/secrets.yml"

    - name: Create installer iso path
      ansible.builtin.file:
        path: "{{ rhel_iso_path | default('/usr/share/rhel-iso') }}"
        state: directory

    - name: Generating an access token
      ansible.builtin.uri:
        url: https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token
        method: POST
        body_format: form-urlencoded
        return_content: true
        body:
          grant_type: "refresh_token"
          client_id: "rhsm-api"
          refresh_token: "{{ offline_token }}"
      register: temp_token
      until: temp_token is not failed
      retries: 15
      delay: 20

    - name: Download rhel boot x86_64 iso
      ansible.builtin.get_url:
        url: "https://api.access.redhat.com/management/v1/images/{{ rhel_iso_download_x86_64 }}/download"
        headers:
          accept: "application/json"
          Authorization: "Bearer {{ temp_token.json.access_token }}"
        dest: "{{ rhel_iso_path | default('/usr/share/rhel-iso') }}/rhel-boot.iso"
        mode: "0644"
        checksum: "sha256: {{ rhel_iso_download_x86_64 }}"
      register: download_rhel_boot_iso
      until: download_rhel_boot_iso is not failed
      retries: 15
      delay: 20
      when: ansible_architecture is not defined or ansible_architecture == "x86_64"

    - name: Download rhel boot aarch64 iso
      ansible.builtin.get_url:
        url: "https://api.access.redhat.com/management/v1/images/{{ rhel_iso_download_aarch64 }}/download"
        headers:
          accept: "application/json"
          Authorization: "Bearer {{ temp_token.json.access_token }}"
        dest: "{{ rhel_iso_path | default('/usr/share/rhel-iso') }}/rhel-boot.iso"
        mode: "0644"
        checksum: "sha256: {{ rhel_iso_download_aarch64 }}"
      register: download_rhel_boot_iso
      until: download_rhel_boot_iso is not failed
      retries: 15
      delay: 20
      when: ansible_architecture == "aarch64"

- name: Prepare Image Builder for Microshift
  become: true
  when: microshift | default(true)
  block:
    - name: Create rhocp-{{ microshift_release }}.toml configuration file
      copy:
        dest: "/tmp/rhocp-{{ microshift_release }}.toml"
        content: |
          id = "rhocp-{{ microshift_release }}"
          name = "Red Hat OpenShift Container Platform {{ microshift_release }} for RHEL 9"
          type = "yum-baseurl"
          url = "https://cdn.redhat.com/content/dist/layered/rhel9/{{ ansible_architecture }}/rhocp/{{ microshift_release }}/os"
          check_gpg = true
          check_ssl = true
          system = false
          rhsm = true

    - name: Create fast-datapath.toml configuration file
      copy:
        dest: "/tmp/fast-datapath.toml"
        content: |
          id = "fast-datapath"
          name = "Fast Datapath for RHEL 9"
          type = "yum-baseurl"
          url = "https://cdn.redhat.com/content/dist/layered/rhel9/{{ ansible_architecture }}/fast-datapath/os"
          check_gpg = true
          check_ssl = true
          system = false
          rhsm = true

    - name: Add sources to Image Builder
      command: "composer-cli sources add {{ item }}"
      loop:
        - "/tmp/rhocp-{{ microshift_release }}.toml"
        - "/tmp/fast-datapath.toml"

    - name: Microshift offline
      when: microshift_get_offline_images | default(true)
      block:
          - name: Enable OCP repo on the host for Microshift
            community.general.rhsm_repository:
              state: enabled
              name: "rhocp-{{ microshift_release }}-for-rhel-9-{{ ansible_architecture }}-rpms"

          - name: Getting microshift-release-info package
            ansible.builtin.shell:
              cmd: dnf download -y microshift-release-info
            register: _dnf_output

            #bug with cmd output
          - name: Getting microshift-release-info package
            ansible.builtin.shell:
              cmd: dnf download -y microshift-release-info
            register: _dnf_output

          - name: Capture filename from the output
            set_fact:
              _microshift_release_info_string: >-
                {{
                  _dnf_output.stdout
                  | regex_search('microshift-release-info-[^\n:]*')
                  | default('')
                  | regex_replace(':$', '')
                }}

          - name: Display captured microshift-release-info string
            debug:
              var: _microshift_release_info_string

          - name: Running rpm2cpio for the microshift-release-info package
            ansible.builtin.shell:
              cmd: rpm2cpio {{ _microshift_release_info_string }} | cpio -idmv

          - name: Be sure that jq is installed
            ansible.builtin.dnf:
              name: jq

          - name: Create /opt/files directory if it does not exist
            ansible.builtin.file:
              path:  "/opt/files"
              state: directory

          - name: Clear previous Microshift images - TOML
            ansible.builtin.file:
              path: /opt/files/blueprint-microshift-embedded.toml
              state: absent

          - name: Clear previous Microshift images - YAML
            ansible.builtin.file:
              path: /opt/files/blueprint-microshift-embedded.yaml
              state: absent
           
          - name: Extracting the Microshift images to TOML
            ansible.builtin.shell:
              cmd: jq -r '.images | .[] | ("[[containers]]\nsource = \"" + . + "\"\n")' "./usr/share/microshift/release/release-{{ ansible_architecture }}.json" >> "/opt/files/blueprint-microshift-embedded.toml"

          - name: Extracting the Microshift images to YAML
            ansible.builtin.shell:
              cmd: |
                jq -r '.images | to_entries | map("  - \(.value)") | join("\n")' "./usr/share/microshift/release/release-{{ ansible_architecture }}.json" \
                | awk 'BEGIN {print "builder_compose_containers:"} {print}' \
                >> "/opt/files/blueprint-microshift-embedded.yaml"


          - name: Create ../files directory on localhost if it doesn't exist
            become: false
            delegate_to: localhost
            ansible.builtin.file:
              path: "../files"
              state: directory

          - name: Fetch Microshift embedded images TOLM file from remote server to localhost
            ansible.builtin.fetch:
              src: "/opt/files/blueprint-microshift-embedded.toml"
              dest: "../files/microshift-embedded-images.toml"
              flat: yes
              validate_checksum: no
              fail_on_missing: no

          # This repo is just to download microshift_release_info
          - name: Disable OCP repo 
            community.general.rhsm_repository:
              state: disabled
              name: "rhocp-{{ microshift_release }}-for-rhel-9-{{ ansible_architecture }}-rpms"


    - name: Add pull-secret to Image Builder
      become: true
      when: pull_secret | default(false)
      block:
        - name: Include secrets file with pull-secret 
          include_vars:
            file: "../vars/secrets.yml"

        - name: Create /etc/osbuild-worker/ directory
          file:
            path: /etc/osbuild-worker/
            state: directory

        - name: Put pull_secret into /etc/osbuild-worker/pull-secret.json
          copy:
            content: "{{ pull_secret }}"
            dest: /etc/osbuild-worker/pull-secret.json

        - name: Create /etc/osbuild-worker/osbuild-worker.toml
          copy:
            content: |
              [containers]
              auth_file_path = "/etc/osbuild-worker/pull-secret.json"
            dest: /etc/osbuild-worker/osbuild-worker.toml

#        - name: Restart osbuild-worker@1.service
#          systemd:
#            name: osbuild-worker@1
#            state: restarted

        # DOCUMENTATION NOW SAYS THAT YOU HAVE TO REBOOT THE SERVER: https://docs.redhat.com/en/documentation/red_hat_build_of_microshift/4.14/html/installing/microshift-embed-in-rpm-ostree-for-offline-use#microshift-embed-microshift-update-osbuilder-worker_microshift-embed-rpm-ostree-offline-use
        - name: Reboot (as per indicated in the documentation)
          become: true
          reboot:
            msg: "Reboot initiated by Ansible"
            connect_timeout: 5
            reboot_timeout: 300
            pre_reboot_delay: 0
            post_reboot_delay: 30
            test_command: uptime

        - name: Ping the target host
          ping:
          
        - debug:
            msg: "Reboot done"
 
